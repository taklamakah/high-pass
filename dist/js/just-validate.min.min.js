"use strict";

function _defineProperty(e, t, i) {
	return t in e ? Object.defineProperty(e, t, {
		value: i,
		enumerable: !0,
		configurable: !0,
		writable: !0
	}) : e[t] = i, e
}
var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
	return typeof e
} : function(e) {
	return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
};
! function() {
	for(var e = ["DocumentType", "Element", "CharacterData"], t = function() {
			null != this.parentNode && this.parentNode.removeChild(this)
		}, i = 0; i < e.length; i++) {
		var r = e[i];
		window[r] && !window[r].prototype.remove && (window[r].prototype.remove = t)
	}
}(),
function(e) {
	function t() {}

	function i(e, t) {
		return function() {
			e.apply(t, arguments)
		}
	}

	function r(e) {
		if("object" !== _typeof(this)) throw new TypeError("Promises must be constructed via new");
		if("function" != typeof e) throw new TypeError("not a function");
		this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], u(e, this)
	}

	function n(e, t) {
		for(; 3 === e._state;) e = e._value;
		return 0 === e._state ? void e._deferreds.push(t) : (e._handled = !0, void r._immediateFn(function() {
			var i = 1 === e._state ? t.onFulfilled : t.onRejected;
			if(null === i) return void(1 === e._state ? o : s)(t.promise, e._value);
			var r;
			try {
				r = i(e._value)
			} catch(n) {
				return void s(t.promise, n)
			}
			o(t.promise, r)
		}))
	}

	function o(e, t) {
		try {
			if(t === e) throw new TypeError("A promise cannot be resolved with itself.");
			if(t && ("object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) || "function" == typeof t)) {
				var n = t.then;
				if(t instanceof r) return e._state = 3, e._value = t, void a(e);
				if("function" == typeof n) return void u(i(n, t), e)
			}
			e._state = 1, e._value = t, a(e)
		} catch(o) {
			s(e, o)
		}
	}

	function s(e, t) {
		e._state = 2, e._value = t, a(e)
	}

	function a(e) {
		2 === e._state && 0 === e._deferreds.length && r._immediateFn(function() {
			e._handled || r._unhandledRejectionFn(e._value)
		});
		for(var t = 0, i = e._deferreds.length; t < i; t++) n(e, e._deferreds[t]);
		e._deferreds = null
	}

	function l(e, t, i) {
		this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.promise = i
	}

	function u(e, t) {
		var i = !1;
		try {
			e(function(e) {
				i || (i = !0, o(t, e))
			}, function(e) {
				i || (i = !0, s(t, e))
			})
		} catch(r) {
			if(i) return;
			i = !0, s(t, r)
		}
	}
	var d = setTimeout;
	r.prototype["catch"] = function(e) {
		return this.then(null, e)
	}, r.prototype.then = function(e, i) {
		var r = new this.constructor(t);
		return n(this, new l(e, i, r)), r
	}, r.all = function(e) {
		var t = Array.prototype.slice.call(e);
		return new r(function(e, i) {
			function r(o, s) {
				try {
					if(s && ("object" === ("undefined" == typeof s ? "undefined" : _typeof(s)) || "function" == typeof s)) {
						var a = s.then;
						if("function" == typeof a) return void a.call(s, function(e) {
							r(o, e)
						}, i)
					}
					t[o] = s, 0 === --n && e(t)
				} catch(l) {
					i(l)
				}
			}
			if(0 === t.length) return e([]);
			for(var n = t.length, o = 0; o < t.length; o++) r(o, t[o])
		})
	}, r.resolve = function(e) {
		return e && "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) && e.constructor === r ? e : new r(function(t) {
			t(e)
		})
	}, r.reject = function(e) {
		return new r(function(t, i) {
			i(e)
		})
	}, r.race = function(e) {
		return new r(function(t, i) {
			for(var r = 0, n = e.length; r < n; r++) e[r].then(t, i)
		})
	}, r._immediateFn = "function" == typeof setImmediate && function(e) {
		setImmediate(e)
	} || function(e) {
		d(e, 0)
	}, r._unhandledRejectionFn = function(e) {
		"undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", e)
	}, r._setImmediateFn = function(e) {
		r._immediateFn = e
	}, r._setUnhandledRejectionFn = function(e) {
		r._unhandledRejectionFn = e
	}, "undefined" != typeof module && module.exports ? module.exports = r : e.Promise || (e.Promise = r)
}(window),
function(e) {
	e.Promise || (e.Promise = Promise);
	var t = "required",
		i = "email",
		r = "minLength",
		n = "maxLength",
		o = "password",
		s = "zip",
		a = "phone",
		l = "remote",
		u = "strength",
		d = "function",
		c = function(e, t) {
			if("string" == typeof e) return e;
			var i = "post" === t.toLowerCase() ? "" : "?";
			return Array.isArray(e) ? i + e.map(function(e) {
				return e.name + "=" + e.value
			}).join("&") : i + Object.keys(e).map(function(t) {
				return t + "=" + e[t]
			}).join("&")
		},
		h = function(e) {
			var t = e.url,
				i = e.method,
				r = e.data,
				n = e.debug,
				o = e.callback,
				s = e.error;
			if(n) return void o("test");
			var a = e.async !== !1,
				l = new XMLHttpRequest,
				u = c(r, "get"),
				d = null;
			"post" === i.toLowerCase() && (d = c(r, "post"), u = ""), l.open(i, t + u, a), l.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), l.onreadystatechange = function() {
				4 === this.readyState && (200 === this.status ? o(this.responseText) : s && s(this.responseText))
			}, l.send(d)
		},
		f = function(e, t) {
			this.options = t || {}, this.rules = this.options.rules || {}, this.messages = this.options.messages || void 0, this.colorWrong = this.options.colorWrong || "#B81111", this.result = {}, this.elements = [], this.tooltip = this.options.tooltip || {}, this.tooltipFadeOutTime = this.tooltip.fadeOutTime || 5e3, this.tooltipFadeOutClass = this.tooltip.fadeOutClass || "just-validate-tooltip-hide", this.tooltipSelectorWrap = document.querySelectorAll(this.tooltip.selectorWrap).length ? document.querySelectorAll(this.tooltip.selectorWrap) : document.querySelectorAll(".just-validate-tooltip-container"), this.bindHandlerKeyup = this.handlerKeyup.bind(this), this.submitHandler = this.options.submitHandler || void 0, this.invalidFormCallback = this.options.invalidFormCallback || void 0, this.promisesRemote = [], this.isValidationSuccess = !1, this.focusWrongField = this.options.focusWrongField || !1, this.REGEXP = {
				email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
				zip: /^\d{5}(-\d{4})?$/,
				phone: /^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$/,
				password: /[^\w\d]*(([0-9]+.*[A-Za-z]+.*)|[A-Za-z]+.*([0-9]+.*))/,
				strengthPass: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]/
			}, this.DEFAULT_REMOTE_ERROR = "Error", this.state = {
				tooltipsTimer: null
			}, this.setForm(document.querySelector(e))
		};
	f.prototype = {
		defaultRules: {
			email: {
				required: !0,
				email: !0
			},
			name: {
				required: !0,
				minLength: 3,
				maxLength: 15
			},
			text: {
				required: !0,
				maxLength: 300,
				minLength: 5
			},
			password: {
				required: !0,
				password: !0,
				minLength: 4,
				maxLength: 8
			},
			zip: {
				required: !0,
				zip: !0
			},
			phone: {
				phone: !0
			}
		},
		defaultMessages: {
			required: "The field is required",
			email: "Недопустимый формат",
			maxLength: "Недопустимый формат",
			minLength: "Недопустимый формат",
			password: "Password is not valid",
			remote: "Email already exists",
			strength: "Password must contents at least one uppercase letter, one lowercase letter and one number",
			"function": "Function returned false"
		},
		handlerKeyup: function(e) {
			var t = e.target,
				i = {
					name: t.getAttribute("data-validate-field"),
					value: t.value
				};
			delete this.result[i.name], this.validateItem({
				name: i.name,
				value: i.value,
				group: [],
				isKeyupChange: !0
			}), this.renderErrors()
		},
		setterEventListener: function(e, t, i, r) {
			switch("keyup" === t && (i = this.bindHandlerKeyup), r) {
				case "add":
					e.addEventListener(t, i);
					break;
				case "remove":
					e.removeEventListener(t, i)
			}
		},
		getElementsRealValue: function() {
			for(var e = this.$form.querySelectorAll("*"), t = void 0, i = {}, r = 0, n = e.length; r < n; ++r)
				if(t = e[r].getAttribute("name")) {
					if("checkbox" === e[r].type) {
						i[t] = e[r].checked;
						continue
					}
					i[t] = e[r].value
				}
			return i
		},
		validationFailed: function() {
			this.invalidFormCallback && this.invalidFormCallback(this.result);
			var e = document.querySelector(".js-validate-error-field");
			this.focusWrongField && e && e.focus && e.focus()
		},
		validationSuccess: function() {
			if(0 === Object.keys(this.result).length) {
				if(this.isValidationSuccess = !1, this.submitHandler) {
					var e = this.getElementsRealValue();
					return void this.submitHandler(this.$form, e, h)
				}
				this.$form.submit()
			}
		},
		setForm: function(e) {
			var t = this;
			this.$form = e, this.$form.setAttribute("novalidate", "novalidate"), this.$form.addEventListener("submit", function(e) {
				return e.preventDefault(), t.result = [], t.getElements(), t.promisesRemote.length ? void Promise.all(t.promisesRemote).then(function() {
					t.promisesRemote = [], t.isValidationSuccess ? t.validationSuccess() : t.validationFailed()
				}) : void(t.isValidationSuccess ? t.validationSuccess() : t.validationFailed())
			})
		},
		isEmail: function(e) {
			return this.REGEXP.email.test(e)
		},
		isZip: function(e) {
			return this.REGEXP.zip.test(e)
		},
		isPhone: function(e) {
			return this.REGEXP.phone.test(e)
		},
		isPassword: function(e) {
			return this.REGEXP.password.test(e)
		},
		isEmpty: function(e) {
			var t = e;
			return e.trim && (t = e.trim()), !t
		},
		checkLengthMax: function(e, t) {
			return e.length <= t
		},
		checkLengthMin: function(e, t) {
			return e.length >= t
		},
		checkStrengthPass: function(e) {
			return this.REGEXP.strengthPass.test(e)
		},
		getElements: function() {
			var e = this,
				t = this.$form.querySelectorAll("[data-validate-field]");
			this.elements = [];
			for(var i = function(i, r) {
					var n = t[i],
						o = n.getAttribute("data-validate-field"),
						s = n.value,
						a = !1,
						l = [];
					if("checkbox" === n.type && (s = n.checked || "", n.addEventListener("change", function(t) {
							var i = t.target,
								r = {
									name: i.getAttribute("data-validate-field"),
									value: i.checked
								};
							delete e.result[r.name], e.validateItem({
								name: r.name,
								value: r.value,
								group: []
							}), e.renderErrors()
						})), "radio" === n.type) {
						var u = e.elements.filter(function(e) {
							if(e.name === o) return e
						})[0];
						u ? (u.group.push(n.checked), a = !0) : l.push(n.checked), n.addEventListener("change", function(t) {
							var i = t.target,
								r = {
									name: i.getAttribute("data-validate-field"),
									value: i.checked
								};
							delete e.result[r.name], e.validateItem({
								name: r.name,
								value: r.value,
								group: []
							}), e.renderErrors()
						})
					}
					e.setterEventListener(n, "keyup", e.handlerKeyup, "add"), a || e.elements.push({
						name: o,
						value: s,
						group: l
					})
				}, r = 0, n = t.length; r < n; ++r) i(r, n);
			this.validateElements()
		},
		validateRequired: function(e) {
			return !this.isEmpty(e)
		},
		validateEmail: function(e) {
			return this.isEmail(e)
		},
		validatePhone: function(e) {
			return this.isPhone(e)
		},
		validateMinLength: function(e, t) {
			return this.checkLengthMin(e, t)
		},
		validateMaxLength: function(e, t) {
			return this.checkLengthMax(e, t)
		},
		validateStrengthPass: function(e) {
			return this.checkStrengthPass(e)
		},
		validatePassword: function(e) {
			return this.isPassword(e)
		},
		validateZip: function(e) {
			return this.isZip(e)
		},
		validateRemote: function(e) {
			var t = e.value,
				i = e.name,
				r = e.url,
				n = e.successAnswer,
				o = e.sendParam,
				s = e.method;
			return new Promise(function(e) {
				h({
					url: r,
					method: s,
					data: _defineProperty({}, o, t),
					async: !0,
					callback: function(t) {
						t.toLowerCase() === n.toLowerCase() && e("ok"), e({
							type: "incorrect",
							name: i
						})
					},
					error: function() {
						e({
							type: "error",
							name: i
						})
					}
				})
			})
		},
		generateMessage: function(e, t, i) {
			var r = this.messages || this.defaultMessages,
				n = r[t] && r[t][e] || this.messages && "string" == typeof this.messages[t] && r[t] || this.defaultMessages[e] || this.DEFAULT_REMOTE_ERROR;
			i && (n = n.replace(":value", i.toString())), this.result[t] = {
				message: n
			}
		},
		validateElements: function() {
			var e = this;
			return this.lockForm(), this.elements.forEach(function(t) {
				e.validateItem({
					name: t.name,
					value: t.value,
					group: t.group
				})
			}), this.promisesRemote.length ? void Promise.all(this.promisesRemote).then(function(t) {
				t.forEach(function(t) {
					return "ok" === t ? void e.renderErrors() : ("error" === t.type && alert("Server error occured. Please try later."), e.generateMessage(l, t.name), void e.renderErrors())
				})
			}) : void this.renderErrors()
		},
		validateItem: function(e) {
			var c = this,
				h = e.name,
				f = e.group,
				m = e.value,
				v = e.isKeyupChange,
				p = this.rules[h] || this.defaultRules[h] || !1;
			if(p)
				for(var g in p) {
					var y = p[g];
					if(g !== t && g !== d && "" == m) return;
					switch(g) {
						case d:
							if("function" != typeof y) break;
							if(y(h, m)) break;
							return void this.generateMessage(d, h, y);
						case t:
							if(!y) break;
							if(f.length) {
								var b = !1;
								if(f.forEach(function(e) {
										c.validateRequired(e) && (b = !0)
									}), b) break
							} else if(this.validateRequired(m)) break;
							return void this.generateMessage(t, h);
						case i:
							if(!y) break;
							if(this.validateEmail(m)) break;
							return void this.generateMessage(i, h);
						case r:
							if(!y) break;
							if(this.validateMinLength(m, y)) break;
							return void this.generateMessage(r, h, y);
						case n:
							if(!y) break;
							if(this.validateMaxLength(m, y)) break;
							return void this.generateMessage(n, h, y);
						case a:
							if(!y) break;
							if(this.validatePhone(m)) break;
							return void this.generateMessage(a, h);
						case o:
							if(!y) break;
							if(this.validatePassword(m)) break;
							return void this.generateMessage(o, h);
						case u:
							if(!y || "object" !== ("undefined" == typeof y ? "undefined" : _typeof(y))) break;
							if(y["default"] && this.validateStrengthPass(m)) break;
							if(y.custom) {
								var E = void 0;
								try {
									E = new RegExp(y.custom)
								} catch(w) {
									E = this.REGEXP.strengthPass, console.error("Custom regexp for strength rule is not valid. Default regexp was used.")
								}
								if(E.test(m)) break
							}
							return void this.generateMessage(u, h);
						case s:
							if(!y) break;
							if(this.validateZip(m)) break;
							return void this.generateMessage(s, h);
						case l:
							if(v) break;
							if(!y) break;
							var k = y.url,
								_ = y.successAnswer,
								P = y.method,
								R = y.sendParam,
								S = this.$form.querySelector('input[data-validate-field="' + h + '"]');
							return this.setterEventListener(S, "keyup", this.handlerKeyup, "remove"), void this.promisesRemote.push(this.validateRemote({
								name: h,
								value: m,
								url: k,
								method: P,
								sendParam: R,
								successAnswer: _
							}))
					}
				}
		},
		clearErrors: function() {
			for(var e = document.querySelectorAll(".js-validate-error-label"), t = 0, i = e.length; t < i; ++t) e[t].remove();
			e = document.querySelectorAll(".js-validate-error-field");
			for(var r = 0, n = e.length; r < n; ++r) e[r].classList.remove("js-validate-error-field"), e[r].style.border = "", e[r].style.color = ""
		},
		renderErrors: function() {
			var e = this;
			if(this.clearErrors(), this.unlockForm(), this.isValidationSuccess = !1, 0 === Object.keys(this.result).length) return void(this.isValidationSuccess = !0);
			for(var t in this.result) {
				var i = this.result[t].message,
					r = this.$form.querySelectorAll('[data-validate-field="' + t + '"]'),
					n = r[r.length - 1],
					o = document.createElement("div");
				if(o.innerHTML = i, o.className = "js-validate-error-label", o.setAttribute("style", "color: " + this.colorWrong), n.style.border = "1px solid " + this.colorWrong, n.style.color = "" + this.colorWrong, n.classList.add("js-validate-error-field"), "checkbox" === n.type || "radio" === n.type) {
					var s = document.querySelector('label[for="' + n.getAttribute("id") + '"]');
					"label" === n.parentNode.tagName.toLowerCase() ? n.parentNode.parentNode.insertBefore(o, null) : s ? s.parentNode.insertBefore(o, s.nextSibling) : n.parentNode.insertBefore(o, n.nextSibling)
				} else n.parentNode.insertBefore(o, n.nextSibling)
			}
			this.tooltipSelectorWrap.length && (this.state.tooltipsTimer = setTimeout(function() {
				e.hideTooltips()
			}, this.tooltipFadeOutTime))
		},
		hideTooltips: function() {
			var e = this,
				t = document.querySelectorAll(".js-validate-error-label");
			t.forEach(function(t) {
				t.classList.add(e.tooltipFadeOutClass)
			}), this.state.tooltipsTimer = null
		},
		lockForm: function() {
			for(var e = this.$form.querySelectorAll("input, textarea, button, select"), t = 0, i = e.length; t < i; ++t) e[t].setAttribute("disabled", "disabled"), e[t].style.pointerEvents = "none", e[t].style.webitFilter = "grayscale(100%)", e[t].style.filter = "grayscale(100%)"
		},
		unlockForm: function() {
			for(var e = this.$form.querySelectorAll("input, textarea, button, select"), t = 0, i = e.length; t < i; ++t) e[t].removeAttribute("disabled"), e[t].style.pointerEvents = "", e[t].style.webitFilter = "", e[t].style.filter = ""
		}
	}, e.JustValidate = f
}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJqdXN0LXZhbGlkYXRlLm1pbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCB0LCBpKSB7XHJcblx0cmV0dXJuIHQgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0LCB7XHJcblx0XHR2YWx1ZTogaSxcclxuXHRcdGVudW1lcmFibGU6ICEwLFxyXG5cdFx0Y29uZmlndXJhYmxlOiAhMCxcclxuXHRcdHdyaXRhYmxlOiAhMFxyXG5cdH0pIDogZVt0XSA9IGksIGVcclxufVxyXG52YXIgX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uKGUpIHtcclxuXHRyZXR1cm4gdHlwZW9mIGVcclxufSA6IGZ1bmN0aW9uKGUpIHtcclxuXHRyZXR1cm4gZSAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBlLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgZSAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgZVxyXG59O1xyXG4hIGZ1bmN0aW9uKCkge1xyXG5cdGZvcih2YXIgZSA9IFtcIkRvY3VtZW50VHlwZVwiLCBcIkVsZW1lbnRcIiwgXCJDaGFyYWN0ZXJEYXRhXCJdLCB0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdG51bGwgIT0gdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKVxyXG5cdFx0fSwgaSA9IDA7IGkgPCBlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgciA9IGVbaV07XHJcblx0XHR3aW5kb3dbcl0gJiYgIXdpbmRvd1tyXS5wcm90b3R5cGUucmVtb3ZlICYmICh3aW5kb3dbcl0ucHJvdG90eXBlLnJlbW92ZSA9IHQpXHJcblx0fVxyXG59KCksXHJcbmZ1bmN0aW9uKGUpIHtcclxuXHRmdW5jdGlvbiB0KCkge31cclxuXHJcblx0ZnVuY3Rpb24gaShlLCB0KSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGUuYXBwbHkodCwgYXJndW1lbnRzKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcihlKSB7XHJcblx0XHRpZihcIm9iamVjdFwiICE9PSBfdHlwZW9mKHRoaXMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3XCIpO1xyXG5cdFx0aWYoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwibm90IGEgZnVuY3Rpb25cIik7XHJcblx0XHR0aGlzLl9zdGF0ZSA9IDAsIHRoaXMuX2hhbmRsZWQgPSAhMSwgdGhpcy5fdmFsdWUgPSB2b2lkIDAsIHRoaXMuX2RlZmVycmVkcyA9IFtdLCB1KGUsIHRoaXMpXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBuKGUsIHQpIHtcclxuXHRcdGZvcig7IDMgPT09IGUuX3N0YXRlOykgZSA9IGUuX3ZhbHVlO1xyXG5cdFx0cmV0dXJuIDAgPT09IGUuX3N0YXRlID8gdm9pZCBlLl9kZWZlcnJlZHMucHVzaCh0KSA6IChlLl9oYW5kbGVkID0gITAsIHZvaWQgci5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBpID0gMSA9PT0gZS5fc3RhdGUgPyB0Lm9uRnVsZmlsbGVkIDogdC5vblJlamVjdGVkO1xyXG5cdFx0XHRpZihudWxsID09PSBpKSByZXR1cm4gdm9pZCgxID09PSBlLl9zdGF0ZSA/IG8gOiBzKSh0LnByb21pc2UsIGUuX3ZhbHVlKTtcclxuXHRcdFx0dmFyIHI7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0ciA9IGkoZS5fdmFsdWUpXHJcblx0XHRcdH0gY2F0Y2gobikge1xyXG5cdFx0XHRcdHJldHVybiB2b2lkIHModC5wcm9taXNlLCBuKVxyXG5cdFx0XHR9XHJcblx0XHRcdG8odC5wcm9taXNlLCByKVxyXG5cdFx0fSkpXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBvKGUsIHQpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGlmKHQgPT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLlwiKTtcclxuXHRcdFx0aWYodCAmJiAoXCJvYmplY3RcIiA9PT0gKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHQgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0KSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiB0KSkge1xyXG5cdFx0XHRcdHZhciBuID0gdC50aGVuO1xyXG5cdFx0XHRcdGlmKHQgaW5zdGFuY2VvZiByKSByZXR1cm4gZS5fc3RhdGUgPSAzLCBlLl92YWx1ZSA9IHQsIHZvaWQgYShlKTtcclxuXHRcdFx0XHRpZihcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG4pIHJldHVybiB2b2lkIHUoaShuLCB0KSwgZSlcclxuXHRcdFx0fVxyXG5cdFx0XHRlLl9zdGF0ZSA9IDEsIGUuX3ZhbHVlID0gdCwgYShlKVxyXG5cdFx0fSBjYXRjaChvKSB7XHJcblx0XHRcdHMoZSwgbylcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHMoZSwgdCkge1xyXG5cdFx0ZS5fc3RhdGUgPSAyLCBlLl92YWx1ZSA9IHQsIGEoZSlcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGEoZSkge1xyXG5cdFx0MiA9PT0gZS5fc3RhdGUgJiYgMCA9PT0gZS5fZGVmZXJyZWRzLmxlbmd0aCAmJiByLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpIHtcclxuXHRcdFx0ZS5faGFuZGxlZCB8fCByLl91bmhhbmRsZWRSZWplY3Rpb25GbihlLl92YWx1ZSlcclxuXHRcdH0pO1xyXG5cdFx0Zm9yKHZhciB0ID0gMCwgaSA9IGUuX2RlZmVycmVkcy5sZW5ndGg7IHQgPCBpOyB0KyspIG4oZSwgZS5fZGVmZXJyZWRzW3RdKTtcclxuXHRcdGUuX2RlZmVycmVkcyA9IG51bGxcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGwoZSwgdCwgaSkge1xyXG5cdFx0dGhpcy5vbkZ1bGZpbGxlZCA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSA/IGUgOiBudWxsLCB0aGlzLm9uUmVqZWN0ZWQgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgPyB0IDogbnVsbCwgdGhpcy5wcm9taXNlID0gaVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdShlLCB0KSB7XHJcblx0XHR2YXIgaSA9ICExO1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0ZShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aSB8fCAoaSA9ICEwLCBvKHQsIGUpKVxyXG5cdFx0XHR9LCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aSB8fCAoaSA9ICEwLCBzKHQsIGUpKVxyXG5cdFx0XHR9KVxyXG5cdFx0fSBjYXRjaChyKSB7XHJcblx0XHRcdGlmKGkpIHJldHVybjtcclxuXHRcdFx0aSA9ICEwLCBzKHQsIHIpXHJcblx0XHR9XHJcblx0fVxyXG5cdHZhciBkID0gc2V0VGltZW91dDtcclxuXHRyLnByb3RvdHlwZVtcImNhdGNoXCJdID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0cmV0dXJuIHRoaXMudGhlbihudWxsLCBlKVxyXG5cdH0sIHIucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbihlLCBpKSB7XHJcblx0XHR2YXIgciA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHQpO1xyXG5cdFx0cmV0dXJuIG4odGhpcywgbmV3IGwoZSwgaSwgcikpLCByXHJcblx0fSwgci5hbGwgPSBmdW5jdGlvbihlKSB7XHJcblx0XHR2YXIgdCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO1xyXG5cdFx0cmV0dXJuIG5ldyByKGZ1bmN0aW9uKGUsIGkpIHtcclxuXHRcdFx0ZnVuY3Rpb24gcihvLCBzKSB7XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGlmKHMgJiYgKFwib2JqZWN0XCIgPT09IChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBzID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YocykpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgcykpIHtcclxuXHRcdFx0XHRcdFx0dmFyIGEgPSBzLnRoZW47XHJcblx0XHRcdFx0XHRcdGlmKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYSkgcmV0dXJuIHZvaWQgYS5jYWxsKHMsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHRyKG8sIGUpXHJcblx0XHRcdFx0XHRcdH0sIGkpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR0W29dID0gcywgMCA9PT0gLS1uICYmIGUodClcclxuXHRcdFx0XHR9IGNhdGNoKGwpIHtcclxuXHRcdFx0XHRcdGkobClcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoMCA9PT0gdC5sZW5ndGgpIHJldHVybiBlKFtdKTtcclxuXHRcdFx0Zm9yKHZhciBuID0gdC5sZW5ndGgsIG8gPSAwOyBvIDwgdC5sZW5ndGg7IG8rKykgcihvLCB0W29dKVxyXG5cdFx0fSlcclxuXHR9LCByLnJlc29sdmUgPSBmdW5jdGlvbihlKSB7XHJcblx0XHRyZXR1cm4gZSAmJiBcIm9iamVjdFwiID09PSAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgZSA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGUpKSAmJiBlLmNvbnN0cnVjdG9yID09PSByID8gZSA6IG5ldyByKGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0dChlKVxyXG5cdFx0fSlcclxuXHR9LCByLnJlamVjdCA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdHJldHVybiBuZXcgcihmdW5jdGlvbih0LCBpKSB7XHJcblx0XHRcdGkoZSlcclxuXHRcdH0pXHJcblx0fSwgci5yYWNlID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0cmV0dXJuIG5ldyByKGZ1bmN0aW9uKHQsIGkpIHtcclxuXHRcdFx0Zm9yKHZhciByID0gMCwgbiA9IGUubGVuZ3RoOyByIDwgbjsgcisrKSBlW3JdLnRoZW4odCwgaSlcclxuXHRcdH0pXHJcblx0fSwgci5faW1tZWRpYXRlRm4gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHNldEltbWVkaWF0ZSAmJiBmdW5jdGlvbihlKSB7XHJcblx0XHRzZXRJbW1lZGlhdGUoZSlcclxuXHR9IHx8IGZ1bmN0aW9uKGUpIHtcclxuXHRcdGQoZSwgMClcclxuXHR9LCByLl91bmhhbmRsZWRSZWplY3Rpb25GbiA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGNvbnNvbGUgJiYgY29uc29sZSAmJiBjb25zb2xlLndhcm4oXCJQb3NzaWJsZSBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb246XCIsIGUpXHJcblx0fSwgci5fc2V0SW1tZWRpYXRlRm4gPSBmdW5jdGlvbihlKSB7XHJcblx0XHRyLl9pbW1lZGlhdGVGbiA9IGVcclxuXHR9LCByLl9zZXRVbmhhbmRsZWRSZWplY3Rpb25GbiA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdHIuX3VuaGFuZGxlZFJlamVjdGlvbkZuID0gZVxyXG5cdH0sIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyA/IG1vZHVsZS5leHBvcnRzID0gciA6IGUuUHJvbWlzZSB8fCAoZS5Qcm9taXNlID0gcilcclxufSh3aW5kb3cpLFxyXG5mdW5jdGlvbihlKSB7XHJcblx0ZS5Qcm9taXNlIHx8IChlLlByb21pc2UgPSBQcm9taXNlKTtcclxuXHR2YXIgdCA9IFwicmVxdWlyZWRcIixcclxuXHRcdGkgPSBcImVtYWlsXCIsXHJcblx0XHRyID0gXCJtaW5MZW5ndGhcIixcclxuXHRcdG4gPSBcIm1heExlbmd0aFwiLFxyXG5cdFx0byA9IFwicGFzc3dvcmRcIixcclxuXHRcdHMgPSBcInppcFwiLFxyXG5cdFx0YSA9IFwicGhvbmVcIixcclxuXHRcdGwgPSBcInJlbW90ZVwiLFxyXG5cdFx0dSA9IFwic3RyZW5ndGhcIixcclxuXHRcdGQgPSBcImZ1bmN0aW9uXCIsXHJcblx0XHRjID0gZnVuY3Rpb24oZSwgdCkge1xyXG5cdFx0XHRpZihcInN0cmluZ1wiID09IHR5cGVvZiBlKSByZXR1cm4gZTtcclxuXHRcdFx0dmFyIGkgPSBcInBvc3RcIiA9PT0gdC50b0xvd2VyQ2FzZSgpID8gXCJcIiA6IFwiP1wiO1xyXG5cdFx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShlKSA/IGkgKyBlLm1hcChmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0cmV0dXJuIGUubmFtZSArIFwiPVwiICsgZS52YWx1ZVxyXG5cdFx0XHR9KS5qb2luKFwiJlwiKSA6IGkgKyBPYmplY3Qua2V5cyhlKS5tYXAoZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHJldHVybiB0ICsgXCI9XCIgKyBlW3RdXHJcblx0XHRcdH0pLmpvaW4oXCImXCIpXHJcblx0XHR9LFxyXG5cdFx0aCA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0dmFyIHQgPSBlLnVybCxcclxuXHRcdFx0XHRpID0gZS5tZXRob2QsXHJcblx0XHRcdFx0ciA9IGUuZGF0YSxcclxuXHRcdFx0XHRuID0gZS5kZWJ1ZyxcclxuXHRcdFx0XHRvID0gZS5jYWxsYmFjayxcclxuXHRcdFx0XHRzID0gZS5lcnJvcjtcclxuXHRcdFx0aWYobikgcmV0dXJuIHZvaWQgbyhcInRlc3RcIik7XHJcblx0XHRcdHZhciBhID0gZS5hc3luYyAhPT0gITEsXHJcblx0XHRcdFx0bCA9IG5ldyBYTUxIdHRwUmVxdWVzdCxcclxuXHRcdFx0XHR1ID0gYyhyLCBcImdldFwiKSxcclxuXHRcdFx0XHRkID0gbnVsbDtcclxuXHRcdFx0XCJwb3N0XCIgPT09IGkudG9Mb3dlckNhc2UoKSAmJiAoZCA9IGMociwgXCJwb3N0XCIpLCB1ID0gXCJcIiksIGwub3BlbihpLCB0ICsgdSwgYSksIGwuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSwgbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQ0ID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgKDIwMCA9PT0gdGhpcy5zdGF0dXMgPyBvKHRoaXMucmVzcG9uc2VUZXh0KSA6IHMgJiYgcyh0aGlzLnJlc3BvbnNlVGV4dCkpXHJcblx0XHRcdH0sIGwuc2VuZChkKVxyXG5cdFx0fSxcclxuXHRcdGYgPSBmdW5jdGlvbihlLCB0KSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucyA9IHQgfHwge30sIHRoaXMucnVsZXMgPSB0aGlzLm9wdGlvbnMucnVsZXMgfHwge30sIHRoaXMubWVzc2FnZXMgPSB0aGlzLm9wdGlvbnMubWVzc2FnZXMgfHwgdm9pZCAwLCB0aGlzLmNvbG9yV3JvbmcgPSB0aGlzLm9wdGlvbnMuY29sb3JXcm9uZyB8fCBcIiNCODExMTFcIiwgdGhpcy5yZXN1bHQgPSB7fSwgdGhpcy5lbGVtZW50cyA9IFtdLCB0aGlzLnRvb2x0aXAgPSB0aGlzLm9wdGlvbnMudG9vbHRpcCB8fCB7fSwgdGhpcy50b29sdGlwRmFkZU91dFRpbWUgPSB0aGlzLnRvb2x0aXAuZmFkZU91dFRpbWUgfHwgNWUzLCB0aGlzLnRvb2x0aXBGYWRlT3V0Q2xhc3MgPSB0aGlzLnRvb2x0aXAuZmFkZU91dENsYXNzIHx8IFwianVzdC12YWxpZGF0ZS10b29sdGlwLWhpZGVcIiwgdGhpcy50b29sdGlwU2VsZWN0b3JXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnRvb2x0aXAuc2VsZWN0b3JXcmFwKS5sZW5ndGggPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMudG9vbHRpcC5zZWxlY3RvcldyYXApIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5qdXN0LXZhbGlkYXRlLXRvb2x0aXAtY29udGFpbmVyXCIpLCB0aGlzLmJpbmRIYW5kbGVyS2V5dXAgPSB0aGlzLmhhbmRsZXJLZXl1cC5iaW5kKHRoaXMpLCB0aGlzLnN1Ym1pdEhhbmRsZXIgPSB0aGlzLm9wdGlvbnMuc3VibWl0SGFuZGxlciB8fCB2b2lkIDAsIHRoaXMuaW52YWxpZEZvcm1DYWxsYmFjayA9IHRoaXMub3B0aW9ucy5pbnZhbGlkRm9ybUNhbGxiYWNrIHx8IHZvaWQgMCwgdGhpcy5wcm9taXNlc1JlbW90ZSA9IFtdLCB0aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3MgPSAhMSwgdGhpcy5mb2N1c1dyb25nRmllbGQgPSB0aGlzLm9wdGlvbnMuZm9jdXNXcm9uZ0ZpZWxkIHx8ICExLCB0aGlzLlJFR0VYUCA9IHtcclxuXHRcdFx0XHRlbWFpbDogL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC8sXHJcblx0XHRcdFx0emlwOiAvXlxcZHs1fSgtXFxkezR9KT8kLyxcclxuXHRcdFx0XHRwaG9uZTogL14oWzAtOV0oIHwtKT8pPyhcXCg/WzAtOV17M31cXCk/fFswLTldezN9KSggfC0pPyhbMC05XXszfSggfC0pP1swLTldezR9fFthLXpBLVowLTldezd9KSQvLFxyXG5cdFx0XHRcdHBhc3N3b3JkOiAvW15cXHdcXGRdKigoWzAtOV0rLipbQS1aYS16XSsuKil8W0EtWmEtel0rLiooWzAtOV0rLiopKS8sXHJcblx0XHRcdFx0c3RyZW5ndGhQYXNzOiAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZClbYS16QS1aXFxkXS9cclxuXHRcdFx0fSwgdGhpcy5ERUZBVUxUX1JFTU9URV9FUlJPUiA9IFwiRXJyb3JcIiwgdGhpcy5zdGF0ZSA9IHtcclxuXHRcdFx0XHR0b29sdGlwc1RpbWVyOiBudWxsXHJcblx0XHRcdH0sIHRoaXMuc2V0Rm9ybShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpKVxyXG5cdFx0fTtcclxuXHRmLnByb3RvdHlwZSA9IHtcclxuXHRcdGRlZmF1bHRSdWxlczoge1xyXG5cdFx0XHRlbWFpbDoge1xyXG5cdFx0XHRcdHJlcXVpcmVkOiAhMCxcclxuXHRcdFx0XHRlbWFpbDogITBcclxuXHRcdFx0fSxcclxuXHRcdFx0bmFtZToge1xyXG5cdFx0XHRcdHJlcXVpcmVkOiAhMCxcclxuXHRcdFx0XHRtaW5MZW5ndGg6IDMsXHJcblx0XHRcdFx0bWF4TGVuZ3RoOiAxNVxyXG5cdFx0XHR9LFxyXG5cdFx0XHR0ZXh0OiB7XHJcblx0XHRcdFx0cmVxdWlyZWQ6ICEwLFxyXG5cdFx0XHRcdG1heExlbmd0aDogMzAwLFxyXG5cdFx0XHRcdG1pbkxlbmd0aDogNVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwYXNzd29yZDoge1xyXG5cdFx0XHRcdHJlcXVpcmVkOiAhMCxcclxuXHRcdFx0XHRwYXNzd29yZDogITAsXHJcblx0XHRcdFx0bWluTGVuZ3RoOiA0LFxyXG5cdFx0XHRcdG1heExlbmd0aDogOFxyXG5cdFx0XHR9LFxyXG5cdFx0XHR6aXA6IHtcclxuXHRcdFx0XHRyZXF1aXJlZDogITAsXHJcblx0XHRcdFx0emlwOiAhMFxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwaG9uZToge1xyXG5cdFx0XHRcdHBob25lOiAhMFxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0ZGVmYXVsdE1lc3NhZ2VzOiB7XHJcblx0XHRcdHJlcXVpcmVkOiBcIlRoZSBmaWVsZCBpcyByZXF1aXJlZFwiLFxyXG5cdFx0XHRlbWFpbDogXCLQndC10LTQvtC/0YPRgdGC0LjQvNGL0Lkg0YTQvtGA0LzQsNGCXCIsXHJcblx0XHRcdG1heExlbmd0aDogXCLQndC10LTQvtC/0YPRgdGC0LjQvNGL0Lkg0YTQvtGA0LzQsNGCXCIsXHJcblx0XHRcdG1pbkxlbmd0aDogXCLQndC10LTQvtC/0YPRgdGC0LjQvNGL0Lkg0YTQvtGA0LzQsNGCXCIsXHJcblx0XHRcdHBhc3N3b3JkOiBcIlBhc3N3b3JkIGlzIG5vdCB2YWxpZFwiLFxyXG5cdFx0XHRyZW1vdGU6IFwiRW1haWwgYWxyZWFkeSBleGlzdHNcIixcclxuXHRcdFx0c3RyZW5ndGg6IFwiUGFzc3dvcmQgbXVzdCBjb250ZW50cyBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlciwgb25lIGxvd2VyY2FzZSBsZXR0ZXIgYW5kIG9uZSBudW1iZXJcIixcclxuXHRcdFx0XCJmdW5jdGlvblwiOiBcIkZ1bmN0aW9uIHJldHVybmVkIGZhbHNlXCJcclxuXHRcdH0sXHJcblx0XHRoYW5kbGVyS2V5dXA6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0dmFyIHQgPSBlLnRhcmdldCxcclxuXHRcdFx0XHRpID0ge1xyXG5cdFx0XHRcdFx0bmFtZTogdC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbGlkYXRlLWZpZWxkXCIpLFxyXG5cdFx0XHRcdFx0dmFsdWU6IHQudmFsdWVcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRkZWxldGUgdGhpcy5yZXN1bHRbaS5uYW1lXSwgdGhpcy52YWxpZGF0ZUl0ZW0oe1xyXG5cdFx0XHRcdG5hbWU6IGkubmFtZSxcclxuXHRcdFx0XHR2YWx1ZTogaS52YWx1ZSxcclxuXHRcdFx0XHRncm91cDogW10sXHJcblx0XHRcdFx0aXNLZXl1cENoYW5nZTogITBcclxuXHRcdFx0fSksIHRoaXMucmVuZGVyRXJyb3JzKClcclxuXHRcdH0sXHJcblx0XHRzZXR0ZXJFdmVudExpc3RlbmVyOiBmdW5jdGlvbihlLCB0LCBpLCByKSB7XHJcblx0XHRcdHN3aXRjaChcImtleXVwXCIgPT09IHQgJiYgKGkgPSB0aGlzLmJpbmRIYW5kbGVyS2V5dXApLCByKSB7XHJcblx0XHRcdFx0Y2FzZSBcImFkZFwiOlxyXG5cdFx0XHRcdFx0ZS5hZGRFdmVudExpc3RlbmVyKHQsIGkpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcInJlbW92ZVwiOlxyXG5cdFx0XHRcdFx0ZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsIGkpXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRnZXRFbGVtZW50c1JlYWxWYWx1ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZvcih2YXIgZSA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvckFsbChcIipcIiksIHQgPSB2b2lkIDAsIGkgPSB7fSwgciA9IDAsIG4gPSBlLmxlbmd0aDsgciA8IG47ICsrcilcclxuXHRcdFx0XHRpZih0ID0gZVtyXS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpKSB7XHJcblx0XHRcdFx0XHRpZihcImNoZWNrYm94XCIgPT09IGVbcl0udHlwZSkge1xyXG5cdFx0XHRcdFx0XHRpW3RdID0gZVtyXS5jaGVja2VkO1xyXG5cdFx0XHRcdFx0XHRjb250aW51ZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aVt0XSA9IGVbcl0udmFsdWVcclxuXHRcdFx0XHR9XHJcblx0XHRcdHJldHVybiBpXHJcblx0XHR9LFxyXG5cdFx0dmFsaWRhdGlvbkZhaWxlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuaW52YWxpZEZvcm1DYWxsYmFjayAmJiB0aGlzLmludmFsaWRGb3JtQ2FsbGJhY2sodGhpcy5yZXN1bHQpO1xyXG5cdFx0XHR2YXIgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtdmFsaWRhdGUtZXJyb3ItZmllbGRcIik7XHJcblx0XHRcdHRoaXMuZm9jdXNXcm9uZ0ZpZWxkICYmIGUgJiYgZS5mb2N1cyAmJiBlLmZvY3VzKClcclxuXHRcdH0sXHJcblx0XHR2YWxpZGF0aW9uU3VjY2VzczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmKDAgPT09IE9iamVjdC5rZXlzKHRoaXMucmVzdWx0KS5sZW5ndGgpIHtcclxuXHRcdFx0XHRpZih0aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3MgPSAhMSwgdGhpcy5zdWJtaXRIYW5kbGVyKSB7XHJcblx0XHRcdFx0XHR2YXIgZSA9IHRoaXMuZ2V0RWxlbWVudHNSZWFsVmFsdWUoKTtcclxuXHRcdFx0XHRcdHJldHVybiB2b2lkIHRoaXMuc3VibWl0SGFuZGxlcih0aGlzLiRmb3JtLCBlLCBoKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLiRmb3JtLnN1Ym1pdCgpXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRzZXRGb3JtOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHZhciB0ID0gdGhpcztcclxuXHRcdFx0dGhpcy4kZm9ybSA9IGUsIHRoaXMuJGZvcm0uc2V0QXR0cmlidXRlKFwibm92YWxpZGF0ZVwiLCBcIm5vdmFsaWRhdGVcIiksIHRoaXMuJGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0cmV0dXJuIGUucHJldmVudERlZmF1bHQoKSwgdC5yZXN1bHQgPSBbXSwgdC5nZXRFbGVtZW50cygpLCB0LnByb21pc2VzUmVtb3RlLmxlbmd0aCA/IHZvaWQgUHJvbWlzZS5hbGwodC5wcm9taXNlc1JlbW90ZSkudGhlbihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHQucHJvbWlzZXNSZW1vdGUgPSBbXSwgdC5pc1ZhbGlkYXRpb25TdWNjZXNzID8gdC52YWxpZGF0aW9uU3VjY2VzcygpIDogdC52YWxpZGF0aW9uRmFpbGVkKClcclxuXHRcdFx0XHR9KSA6IHZvaWQodC5pc1ZhbGlkYXRpb25TdWNjZXNzID8gdC52YWxpZGF0aW9uU3VjY2VzcygpIDogdC52YWxpZGF0aW9uRmFpbGVkKCkpXHJcblx0XHRcdH0pXHJcblx0XHR9LFxyXG5cdFx0aXNFbWFpbDogZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5SRUdFWFAuZW1haWwudGVzdChlKVxyXG5cdFx0fSxcclxuXHRcdGlzWmlwOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLlJFR0VYUC56aXAudGVzdChlKVxyXG5cdFx0fSxcclxuXHRcdGlzUGhvbmU6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuUkVHRVhQLnBob25lLnRlc3QoZSlcclxuXHRcdH0sXHJcblx0XHRpc1Bhc3N3b3JkOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLlJFR0VYUC5wYXNzd29yZC50ZXN0KGUpXHJcblx0XHR9LFxyXG5cdFx0aXNFbXB0eTogZnVuY3Rpb24oZSkge1xyXG5cdFx0XHR2YXIgdCA9IGU7XHJcblx0XHRcdHJldHVybiBlLnRyaW0gJiYgKHQgPSBlLnRyaW0oKSksICF0XHJcblx0XHR9LFxyXG5cdFx0Y2hlY2tMZW5ndGhNYXg6IGZ1bmN0aW9uKGUsIHQpIHtcclxuXHRcdFx0cmV0dXJuIGUubGVuZ3RoIDw9IHRcclxuXHRcdH0sXHJcblx0XHRjaGVja0xlbmd0aE1pbjogZnVuY3Rpb24oZSwgdCkge1xyXG5cdFx0XHRyZXR1cm4gZS5sZW5ndGggPj0gdFxyXG5cdFx0fSxcclxuXHRcdGNoZWNrU3RyZW5ndGhQYXNzOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLlJFR0VYUC5zdHJlbmd0aFBhc3MudGVzdChlKVxyXG5cdFx0fSxcclxuXHRcdGdldEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGUgPSB0aGlzLFxyXG5cdFx0XHRcdHQgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS12YWxpZGF0ZS1maWVsZF1cIik7XHJcblx0XHRcdHRoaXMuZWxlbWVudHMgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gZnVuY3Rpb24oaSwgcikge1xyXG5cdFx0XHRcdFx0dmFyIG4gPSB0W2ldLFxyXG5cdFx0XHRcdFx0XHRvID0gbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbGlkYXRlLWZpZWxkXCIpLFxyXG5cdFx0XHRcdFx0XHRzID0gbi52YWx1ZSxcclxuXHRcdFx0XHRcdFx0YSA9ICExLFxyXG5cdFx0XHRcdFx0XHRsID0gW107XHJcblx0XHRcdFx0XHRpZihcImNoZWNrYm94XCIgPT09IG4udHlwZSAmJiAocyA9IG4uY2hlY2tlZCB8fCBcIlwiLCBuLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBpID0gdC50YXJnZXQsXHJcblx0XHRcdFx0XHRcdFx0XHRyID0ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lOiBpLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsaWRhdGUtZmllbGRcIiksXHJcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlOiBpLmNoZWNrZWRcclxuXHRcdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGUucmVzdWx0W3IubmFtZV0sIGUudmFsaWRhdGVJdGVtKHtcclxuXHRcdFx0XHRcdFx0XHRcdG5hbWU6IHIubmFtZSxcclxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiByLnZhbHVlLFxyXG5cdFx0XHRcdFx0XHRcdFx0Z3JvdXA6IFtdXHJcblx0XHRcdFx0XHRcdFx0fSksIGUucmVuZGVyRXJyb3JzKClcclxuXHRcdFx0XHRcdFx0fSkpLCBcInJhZGlvXCIgPT09IG4udHlwZSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgdSA9IGUuZWxlbWVudHMuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHRpZihlLm5hbWUgPT09IG8pIHJldHVybiBlXHJcblx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHR1ID8gKHUuZ3JvdXAucHVzaChuLmNoZWNrZWQpLCBhID0gITApIDogbC5wdXNoKG4uY2hlY2tlZCksIG4uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbih0KSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGkgPSB0LnRhcmdldCxcclxuXHRcdFx0XHRcdFx0XHRcdHIgPSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG5hbWU6IGkuZ2V0QXR0cmlidXRlKFwiZGF0YS12YWxpZGF0ZS1maWVsZFwiKSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU6IGkuY2hlY2tlZFxyXG5cdFx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0XHRkZWxldGUgZS5yZXN1bHRbci5uYW1lXSwgZS52YWxpZGF0ZUl0ZW0oe1xyXG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogci5uYW1lLFxyXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6IHIudmFsdWUsXHJcblx0XHRcdFx0XHRcdFx0XHRncm91cDogW11cclxuXHRcdFx0XHRcdFx0XHR9KSwgZS5yZW5kZXJFcnJvcnMoKVxyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZS5zZXR0ZXJFdmVudExpc3RlbmVyKG4sIFwia2V5dXBcIiwgZS5oYW5kbGVyS2V5dXAsIFwiYWRkXCIpLCBhIHx8IGUuZWxlbWVudHMucHVzaCh7XHJcblx0XHRcdFx0XHRcdG5hbWU6IG8sXHJcblx0XHRcdFx0XHRcdHZhbHVlOiBzLFxyXG5cdFx0XHRcdFx0XHRncm91cDogbFxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9LCByID0gMCwgbiA9IHQubGVuZ3RoOyByIDwgbjsgKytyKSBpKHIsIG4pO1xyXG5cdFx0XHR0aGlzLnZhbGlkYXRlRWxlbWVudHMoKVxyXG5cdFx0fSxcclxuXHRcdHZhbGlkYXRlUmVxdWlyZWQ6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0cmV0dXJuICF0aGlzLmlzRW1wdHkoZSlcclxuXHRcdH0sXHJcblx0XHR2YWxpZGF0ZUVtYWlsOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmlzRW1haWwoZSlcclxuXHRcdH0sXHJcblx0XHR2YWxpZGF0ZVBob25lOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmlzUGhvbmUoZSlcclxuXHRcdH0sXHJcblx0XHR2YWxpZGF0ZU1pbkxlbmd0aDogZnVuY3Rpb24oZSwgdCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5jaGVja0xlbmd0aE1pbihlLCB0KVxyXG5cdFx0fSxcclxuXHRcdHZhbGlkYXRlTWF4TGVuZ3RoOiBmdW5jdGlvbihlLCB0KSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmNoZWNrTGVuZ3RoTWF4KGUsIHQpXHJcblx0XHR9LFxyXG5cdFx0dmFsaWRhdGVTdHJlbmd0aFBhc3M6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY2hlY2tTdHJlbmd0aFBhc3MoZSlcclxuXHRcdH0sXHJcblx0XHR2YWxpZGF0ZVBhc3N3b3JkOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmlzUGFzc3dvcmQoZSlcclxuXHRcdH0sXHJcblx0XHR2YWxpZGF0ZVppcDogZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5pc1ppcChlKVxyXG5cdFx0fSxcclxuXHRcdHZhbGlkYXRlUmVtb3RlOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHZhciB0ID0gZS52YWx1ZSxcclxuXHRcdFx0XHRpID0gZS5uYW1lLFxyXG5cdFx0XHRcdHIgPSBlLnVybCxcclxuXHRcdFx0XHRuID0gZS5zdWNjZXNzQW5zd2VyLFxyXG5cdFx0XHRcdG8gPSBlLnNlbmRQYXJhbSxcclxuXHRcdFx0XHRzID0gZS5tZXRob2Q7XHJcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aCh7XHJcblx0XHRcdFx0XHR1cmw6IHIsXHJcblx0XHRcdFx0XHRtZXRob2Q6IHMsXHJcblx0XHRcdFx0XHRkYXRhOiBfZGVmaW5lUHJvcGVydHkoe30sIG8sIHQpLFxyXG5cdFx0XHRcdFx0YXN5bmM6ICEwLFxyXG5cdFx0XHRcdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRcdFx0dC50b0xvd2VyQ2FzZSgpID09PSBuLnRvTG93ZXJDYXNlKCkgJiYgZShcIm9rXCIpLCBlKHtcclxuXHRcdFx0XHRcdFx0XHR0eXBlOiBcImluY29ycmVjdFwiLFxyXG5cdFx0XHRcdFx0XHRcdG5hbWU6IGlcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGUoe1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6IFwiZXJyb3JcIixcclxuXHRcdFx0XHRcdFx0XHRuYW1lOiBpXHJcblx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fSlcclxuXHRcdH0sXHJcblx0XHRnZW5lcmF0ZU1lc3NhZ2U6IGZ1bmN0aW9uKGUsIHQsIGkpIHtcclxuXHRcdFx0dmFyIHIgPSB0aGlzLm1lc3NhZ2VzIHx8IHRoaXMuZGVmYXVsdE1lc3NhZ2VzLFxyXG5cdFx0XHRcdG4gPSByW3RdICYmIHJbdF1bZV0gfHwgdGhpcy5tZXNzYWdlcyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB0aGlzLm1lc3NhZ2VzW3RdICYmIHJbdF0gfHwgdGhpcy5kZWZhdWx0TWVzc2FnZXNbZV0gfHwgdGhpcy5ERUZBVUxUX1JFTU9URV9FUlJPUjtcclxuXHRcdFx0aSAmJiAobiA9IG4ucmVwbGFjZShcIjp2YWx1ZVwiLCBpLnRvU3RyaW5nKCkpKSwgdGhpcy5yZXN1bHRbdF0gPSB7XHJcblx0XHRcdFx0bWVzc2FnZTogblxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0dmFsaWRhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBlID0gdGhpcztcclxuXHRcdFx0cmV0dXJuIHRoaXMubG9ja0Zvcm0oKSwgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHRlLnZhbGlkYXRlSXRlbSh7XHJcblx0XHRcdFx0XHRuYW1lOiB0Lm5hbWUsXHJcblx0XHRcdFx0XHR2YWx1ZTogdC52YWx1ZSxcclxuXHRcdFx0XHRcdGdyb3VwOiB0Lmdyb3VwXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fSksIHRoaXMucHJvbWlzZXNSZW1vdGUubGVuZ3RoID8gdm9pZCBQcm9taXNlLmFsbCh0aGlzLnByb21pc2VzUmVtb3RlKS50aGVuKGZ1bmN0aW9uKHQpIHtcclxuXHRcdFx0XHR0LmZvckVhY2goZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFwib2tcIiA9PT0gdCA/IHZvaWQgZS5yZW5kZXJFcnJvcnMoKSA6IChcImVycm9yXCIgPT09IHQudHlwZSAmJiBhbGVydChcIlNlcnZlciBlcnJvciBvY2N1cmVkLiBQbGVhc2UgdHJ5IGxhdGVyLlwiKSwgZS5nZW5lcmF0ZU1lc3NhZ2UobCwgdC5uYW1lKSwgdm9pZCBlLnJlbmRlckVycm9ycygpKVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0pIDogdm9pZCB0aGlzLnJlbmRlckVycm9ycygpXHJcblx0XHR9LFxyXG5cdFx0dmFsaWRhdGVJdGVtOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdHZhciBjID0gdGhpcyxcclxuXHRcdFx0XHRoID0gZS5uYW1lLFxyXG5cdFx0XHRcdGYgPSBlLmdyb3VwLFxyXG5cdFx0XHRcdG0gPSBlLnZhbHVlLFxyXG5cdFx0XHRcdHYgPSBlLmlzS2V5dXBDaGFuZ2UsXHJcblx0XHRcdFx0cCA9IHRoaXMucnVsZXNbaF0gfHwgdGhpcy5kZWZhdWx0UnVsZXNbaF0gfHwgITE7XHJcblx0XHRcdGlmKHApXHJcblx0XHRcdFx0Zm9yKHZhciBnIGluIHApIHtcclxuXHRcdFx0XHRcdHZhciB5ID0gcFtnXTtcclxuXHRcdFx0XHRcdGlmKGcgIT09IHQgJiYgZyAhPT0gZCAmJiBcIlwiID09IG0pIHJldHVybjtcclxuXHRcdFx0XHRcdHN3aXRjaChnKSB7XHJcblx0XHRcdFx0XHRcdGNhc2UgZDpcclxuXHRcdFx0XHRcdFx0XHRpZihcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIHkpIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdGlmKHkoaCwgbSkpIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB2b2lkIHRoaXMuZ2VuZXJhdGVNZXNzYWdlKGQsIGgsIHkpO1xyXG5cdFx0XHRcdFx0XHRjYXNlIHQ6XHJcblx0XHRcdFx0XHRcdFx0aWYoIXkpIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdGlmKGYubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgYiA9ICExO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYoZi5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjLnZhbGlkYXRlUmVxdWlyZWQoZSkgJiYgKGIgPSAhMClcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSksIGIpIGJyZWFrXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmKHRoaXMudmFsaWRhdGVSZXF1aXJlZChtKSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UodCwgaCk7XHJcblx0XHRcdFx0XHRcdGNhc2UgaTpcclxuXHRcdFx0XHRcdFx0XHRpZigheSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0aWYodGhpcy52YWxpZGF0ZUVtYWlsKG0pKSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdm9pZCB0aGlzLmdlbmVyYXRlTWVzc2FnZShpLCBoKTtcclxuXHRcdFx0XHRcdFx0Y2FzZSByOlxyXG5cdFx0XHRcdFx0XHRcdGlmKCF5KSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRpZih0aGlzLnZhbGlkYXRlTWluTGVuZ3RoKG0sIHkpKSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdm9pZCB0aGlzLmdlbmVyYXRlTWVzc2FnZShyLCBoLCB5KTtcclxuXHRcdFx0XHRcdFx0Y2FzZSBuOlxyXG5cdFx0XHRcdFx0XHRcdGlmKCF5KSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRpZih0aGlzLnZhbGlkYXRlTWF4TGVuZ3RoKG0sIHkpKSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdm9pZCB0aGlzLmdlbmVyYXRlTWVzc2FnZShuLCBoLCB5KTtcclxuXHRcdFx0XHRcdFx0Y2FzZSBhOlxyXG5cdFx0XHRcdFx0XHRcdGlmKCF5KSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRpZih0aGlzLnZhbGlkYXRlUGhvbmUobSkpIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB2b2lkIHRoaXMuZ2VuZXJhdGVNZXNzYWdlKGEsIGgpO1xyXG5cdFx0XHRcdFx0XHRjYXNlIG86XHJcblx0XHRcdFx0XHRcdFx0aWYoIXkpIGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdGlmKHRoaXMudmFsaWRhdGVQYXNzd29yZChtKSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UobywgaCk7XHJcblx0XHRcdFx0XHRcdGNhc2UgdTpcclxuXHRcdFx0XHRcdFx0XHRpZigheSB8fCBcIm9iamVjdFwiICE9PSAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgeSA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHkpKSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0aWYoeVtcImRlZmF1bHRcIl0gJiYgdGhpcy52YWxpZGF0ZVN0cmVuZ3RoUGFzcyhtKSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0aWYoeS5jdXN0b20pIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBFID0gdm9pZCAwO1xyXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0RSA9IG5ldyBSZWdFeHAoeS5jdXN0b20pXHJcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoKHcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0RSA9IHRoaXMuUkVHRVhQLnN0cmVuZ3RoUGFzcywgY29uc29sZS5lcnJvcihcIkN1c3RvbSByZWdleHAgZm9yIHN0cmVuZ3RoIHJ1bGUgaXMgbm90IHZhbGlkLiBEZWZhdWx0IHJlZ2V4cCB3YXMgdXNlZC5cIilcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdGlmKEUudGVzdChtKSkgYnJlYWtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UodSwgaCk7XHJcblx0XHRcdFx0XHRcdGNhc2UgczpcclxuXHRcdFx0XHRcdFx0XHRpZigheSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0aWYodGhpcy52YWxpZGF0ZVppcChtKSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UocywgaCk7XHJcblx0XHRcdFx0XHRcdGNhc2UgbDpcclxuXHRcdFx0XHRcdFx0XHRpZih2KSBicmVhaztcclxuXHRcdFx0XHRcdFx0XHRpZigheSkgYnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGsgPSB5LnVybCxcclxuXHRcdFx0XHRcdFx0XHRcdF8gPSB5LnN1Y2Nlc3NBbnN3ZXIsXHJcblx0XHRcdFx0XHRcdFx0XHRQID0geS5tZXRob2QsXHJcblx0XHRcdFx0XHRcdFx0XHRSID0geS5zZW5kUGFyYW0sXHJcblx0XHRcdFx0XHRcdFx0XHRTID0gdGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yKCdpbnB1dFtkYXRhLXZhbGlkYXRlLWZpZWxkPVwiJyArIGggKyAnXCJdJyk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0dGVyRXZlbnRMaXN0ZW5lcihTLCBcImtleXVwXCIsIHRoaXMuaGFuZGxlcktleXVwLCBcInJlbW92ZVwiKSwgdm9pZCB0aGlzLnByb21pc2VzUmVtb3RlLnB1c2godGhpcy52YWxpZGF0ZVJlbW90ZSh7XHJcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiBoLFxyXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWU6IG0sXHJcblx0XHRcdFx0XHRcdFx0XHR1cmw6IGssXHJcblx0XHRcdFx0XHRcdFx0XHRtZXRob2Q6IFAsXHJcblx0XHRcdFx0XHRcdFx0XHRzZW5kUGFyYW06IFIsXHJcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzQW5zd2VyOiBfXHJcblx0XHRcdFx0XHRcdFx0fSkpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdGNsZWFyRXJyb3JzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Zm9yKHZhciBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5qcy12YWxpZGF0ZS1lcnJvci1sYWJlbFwiKSwgdCA9IDAsIGkgPSBlLmxlbmd0aDsgdCA8IGk7ICsrdCkgZVt0XS5yZW1vdmUoKTtcclxuXHRcdFx0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtdmFsaWRhdGUtZXJyb3ItZmllbGRcIik7XHJcblx0XHRcdGZvcih2YXIgciA9IDAsIG4gPSBlLmxlbmd0aDsgciA8IG47ICsrcikgZVtyXS5jbGFzc0xpc3QucmVtb3ZlKFwianMtdmFsaWRhdGUtZXJyb3ItZmllbGRcIiksIGVbcl0uc3R5bGUuYm9yZGVyID0gXCJcIiwgZVtyXS5zdHlsZS5jb2xvciA9IFwiXCJcclxuXHRcdH0sXHJcblx0XHRyZW5kZXJFcnJvcnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZSA9IHRoaXM7XHJcblx0XHRcdGlmKHRoaXMuY2xlYXJFcnJvcnMoKSwgdGhpcy51bmxvY2tGb3JtKCksIHRoaXMuaXNWYWxpZGF0aW9uU3VjY2VzcyA9ICExLCAwID09PSBPYmplY3Qua2V5cyh0aGlzLnJlc3VsdCkubGVuZ3RoKSByZXR1cm4gdm9pZCh0aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3MgPSAhMCk7XHJcblx0XHRcdGZvcih2YXIgdCBpbiB0aGlzLnJlc3VsdCkge1xyXG5cdFx0XHRcdHZhciBpID0gdGhpcy5yZXN1bHRbdF0ubWVzc2FnZSxcclxuXHRcdFx0XHRcdHIgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXZhbGlkYXRlLWZpZWxkPVwiJyArIHQgKyAnXCJdJyksXHJcblx0XHRcdFx0XHRuID0gcltyLmxlbmd0aCAtIDFdLFxyXG5cdFx0XHRcdFx0byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0XHRcdFx0aWYoby5pbm5lckhUTUwgPSBpLCBvLmNsYXNzTmFtZSA9IFwianMtdmFsaWRhdGUtZXJyb3ItbGFiZWxcIiwgby5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImNvbG9yOiBcIiArIHRoaXMuY29sb3JXcm9uZyksIG4uc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgXCIgKyB0aGlzLmNvbG9yV3JvbmcsIG4uc3R5bGUuY29sb3IgPSBcIlwiICsgdGhpcy5jb2xvcldyb25nLCBuLmNsYXNzTGlzdC5hZGQoXCJqcy12YWxpZGF0ZS1lcnJvci1maWVsZFwiKSwgXCJjaGVja2JveFwiID09PSBuLnR5cGUgfHwgXCJyYWRpb1wiID09PSBuLnR5cGUpIHtcclxuXHRcdFx0XHRcdHZhciBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGFiZWxbZm9yPVwiJyArIG4uZ2V0QXR0cmlidXRlKFwiaWRcIikgKyAnXCJdJyk7XHJcblx0XHRcdFx0XHRcImxhYmVsXCIgPT09IG4ucGFyZW50Tm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPyBuLnBhcmVudE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobywgbnVsbCkgOiBzID8gcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvLCBzLm5leHRTaWJsaW5nKSA6IG4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobywgbi5uZXh0U2libGluZylcclxuXHRcdFx0XHR9IGVsc2Ugbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvLCBuLm5leHRTaWJsaW5nKVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMudG9vbHRpcFNlbGVjdG9yV3JhcC5sZW5ndGggJiYgKHRoaXMuc3RhdGUudG9vbHRpcHNUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZS5oaWRlVG9vbHRpcHMoKVxyXG5cdFx0XHR9LCB0aGlzLnRvb2x0aXBGYWRlT3V0VGltZSkpXHJcblx0XHR9LFxyXG5cdFx0aGlkZVRvb2x0aXBzOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGUgPSB0aGlzLFxyXG5cdFx0XHRcdHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXZhbGlkYXRlLWVycm9yLWxhYmVsXCIpO1xyXG5cdFx0XHR0LmZvckVhY2goZnVuY3Rpb24odCkge1xyXG5cdFx0XHRcdHQuY2xhc3NMaXN0LmFkZChlLnRvb2x0aXBGYWRlT3V0Q2xhc3MpXHJcblx0XHRcdH0pLCB0aGlzLnN0YXRlLnRvb2x0aXBzVGltZXIgPSBudWxsXHJcblx0XHR9LFxyXG5cdFx0bG9ja0Zvcm06IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRmb3IodmFyIGUgPSB0aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0XCIpLCB0ID0gMCwgaSA9IGUubGVuZ3RoOyB0IDwgaTsgKyt0KSBlW3RdLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIiksIGVbdF0uc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiLCBlW3RdLnN0eWxlLndlYml0RmlsdGVyID0gXCJncmF5c2NhbGUoMTAwJSlcIiwgZVt0XS5zdHlsZS5maWx0ZXIgPSBcImdyYXlzY2FsZSgxMDAlKVwiXHJcblx0XHR9LFxyXG5cdFx0dW5sb2NrRm9ybTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGZvcih2YXIgZSA9IHRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvckFsbChcImlucHV0LCB0ZXh0YXJlYSwgYnV0dG9uLCBzZWxlY3RcIiksIHQgPSAwLCBpID0gZS5sZW5ndGg7IHQgPCBpOyArK3QpIGVbdF0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIiksIGVbdF0uc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiXCIsIGVbdF0uc3R5bGUud2ViaXRGaWx0ZXIgPSBcIlwiLCBlW3RdLnN0eWxlLmZpbHRlciA9IFwiXCJcclxuXHRcdH1cclxuXHR9LCBlLkp1c3RWYWxpZGF0ZSA9IGZcclxufSh3aW5kb3cpOyJdLCJmaWxlIjoianVzdC12YWxpZGF0ZS5taW4ubWluLmpzIn0=
